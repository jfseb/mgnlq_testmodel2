"use strict";
/**
 * (C) gerd forstmann 2017
 *
 * Create database
 */
Object.defineProperty(exports, "__esModule", { value: true });
const folderin = 'model_raw_old/testmodel2';
const folderout = 'tmp/testmodel2';
const fs = require("fs");
try {
    fs.mkdirSync('tmp');
    fs.mkdirSync('tmp/testmodel2');
}
catch (e) {
}
const m2s = require("../migrate/model2schema");
// var FUtils = require(root + '/model/model.js')
const mongoose = require('mongoose');
var ModelNameMap = {
    "iupac": "iupacs",
    "GeneticDNA": "dna_aminoacids",
    "bom": "fioriapps",
    "twf_countries": "twf_countries",
    "twf_fields": "twf_fields",
    "questions": "questions",
    "commands": "commands",
    "hints": "hints"
};
function migrateData(sourcmodelpath, destmodelpath, modelnameold) {
    var modelnamenew = ModelNameMap[modelnameold];
    var mdl = m2s.loadModel(sourcmodelpath, modelnameold);
    var schema = m2s.mergeModelJson(modelnamenew, mdl);
    fs.writeFileSync(destmodelpath + '/' + modelnamenew + '.model.mongooseschema.json', JSON.stringify(schema, undefined, 2));
    var newmodeldoc = m2s.makeModelDoc(modelnamenew, mdl);
    fs.writeFileSync(destmodelpath + '/' + modelnamenew + '.model.doc.json', JSON.stringify(newmodeldoc, undefined, 2));
    var mdldata = m2s.loadModelData(sourcmodelpath, modelnameold);
    var mdlDocs = m2s.makeDocuments(mdldata, mdl);
    // write the data
    fs.writeFileSync(destmodelpath + '/' + modelnamenew + '.data.json', JSON.stringify(mdlDocs, undefined, 2));
}
Object.keys(ModelNameMap).forEach(key => {
    migrateData(folderin, folderout, key);
    console.log(` migrated ${key} `);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zY3JpcHRzL21pZ3JhdGVfcmF3LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7OztHQUlHOztBQU1ILE1BQU0sUUFBUSxHQUFHLDBCQUEwQixDQUFDO0FBQzVDLE1BQU0sU0FBUyxHQUFHLGdCQUFnQixDQUFDO0FBRW5DLHlCQUF5QjtBQUV6QixJQUFJO0lBRUosRUFBRSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNwQixFQUFFLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLENBQUM7Q0FDOUI7QUFBQyxPQUFNLENBQUMsRUFBRTtDQUVWO0FBRUQsK0NBQStDO0FBSS9DLGlEQUFpRDtBQUNqRCxNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7QUFHckMsSUFBSSxZQUFZLEdBQUc7SUFDZixPQUFPLEVBQUcsUUFBUTtJQUNsQixZQUFZLEVBQUcsZ0JBQWdCO0lBQy9CLEtBQUssRUFBRyxXQUFXO0lBQ25CLGVBQWUsRUFBRyxlQUFlO0lBQ2pDLFlBQVksRUFBRyxZQUFZO0lBQzNCLFdBQVcsRUFBRSxXQUFXO0lBQ3hCLFVBQVUsRUFBRyxVQUFVO0lBQ3ZCLE9BQU8sRUFBRyxPQUFPO0NBQ3BCLENBQUE7QUFHRCxTQUFTLFdBQVcsQ0FBQyxjQUFzQixFQUFFLGFBQXFCLEVBQUUsWUFBcUI7SUFFckYsSUFBSSxZQUFZLEdBQUcsWUFBWSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ2hELElBQUksR0FBRyxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUMsY0FBYyxFQUFFLFlBQVksQ0FBQyxDQUFDO0lBQ3RELElBQUksTUFBTSxHQUFHLEdBQUcsQ0FBQyxjQUFjLENBQUMsWUFBWSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ25ELEVBQUUsQ0FBQyxhQUFhLENBQUMsYUFBYSxHQUFJLEdBQUcsR0FBRSxZQUFZLEdBQUcsNEJBQTRCLEVBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDM0gsSUFBSSxXQUFXLEdBQUcsR0FBRyxDQUFDLFlBQVksQ0FBQyxZQUFZLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDdEQsRUFBRSxDQUFDLGFBQWEsQ0FBQyxhQUFhLEdBQUksR0FBRyxHQUFFLFlBQVksR0FBRyxpQkFBaUIsRUFBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNySCxJQUFJLE9BQU8sR0FBRyxHQUFHLENBQUMsYUFBYSxDQUFDLGNBQWMsRUFBRSxZQUFZLENBQUMsQ0FBQztJQUM5RCxJQUFJLE9BQU8sR0FBRyxHQUFHLENBQUMsYUFBYSxDQUFDLE9BQU8sRUFBQyxHQUFHLENBQUMsQ0FBQztJQUMvQyxpQkFBaUI7SUFDZixFQUFFLENBQUMsYUFBYSxDQUFDLGFBQWEsR0FBRyxHQUFHLEdBQUcsWUFBWSxHQUFHLFlBQVksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBQyxTQUFTLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMzRyxDQUFDO0FBRUQsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxPQUFPLENBQUUsR0FBRyxDQUFDLEVBQUU7SUFDckMsV0FBVyxDQUFDLFFBQVEsRUFBRSxTQUFTLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDdEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLEdBQUcsR0FBRyxDQUFDLENBQUM7QUFDckMsQ0FBQyxDQUFDLENBQUMiLCJmaWxlIjoic2NyaXB0cy9taWdyYXRlX3Jhdy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiAoQykgZ2VyZCBmb3JzdG1hbm4gMjAxN1xyXG4gKlxyXG4gKiBDcmVhdGUgZGF0YWJhc2VcclxuICovXHJcblxyXG5pbXBvcnQgKiBhcyBDb25zdGFudHMgZnJvbSAnLi4vY29uc3RhbnRzMic7XHJcbmltcG9ydCAqIGFzIE1vZGVsIGZyb20gJ21nbmxxX21vZGVsJztcclxuXHJcblxyXG5jb25zdCBmb2xkZXJpbiA9ICdtb2RlbF9yYXdfb2xkL3Rlc3Rtb2RlbDInO1xyXG5jb25zdCBmb2xkZXJvdXQgPSAndG1wL3Rlc3Rtb2RlbDInO1xyXG5cclxuaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnO1xyXG5cclxudHJ5IHtcclxuXHJcbmZzLm1rZGlyU3luYygndG1wJyk7XHJcbmZzLm1rZGlyU3luYygndG1wL3Rlc3Rtb2RlbDInKTtcclxufSBjYXRjaChlKSB7XHJcblxyXG59XHJcblxyXG5pbXBvcnQgKiBhcyBtMnMgZnJvbSAnLi4vbWlncmF0ZS9tb2RlbDJzY2hlbWEnO1xyXG5cclxuaW1wb3J0IHsgRGF0YWxvYWQgYXMgRGF0YWxvYWQgfSBmcm9tICdtZ25scV9tb2RlbCc7XHJcblxyXG4vLyB2YXIgRlV0aWxzID0gcmVxdWlyZShyb290ICsgJy9tb2RlbC9tb2RlbC5qcycpXHJcbmNvbnN0IG1vbmdvb3NlID0gcmVxdWlyZSgnbW9uZ29vc2UnKTtcclxuXHJcblxyXG52YXIgTW9kZWxOYW1lTWFwID0ge1xyXG4gICAgXCJpdXBhY1wiIDogXCJpdXBhY3NcIixcclxuICAgIFwiR2VuZXRpY0ROQVwiIDogXCJkbmFfYW1pbm9hY2lkc1wiLFxyXG4gICAgXCJib21cIiA6IFwiZmlvcmlhcHBzXCIsXHJcbiAgICBcInR3Zl9jb3VudHJpZXNcIiA6IFwidHdmX2NvdW50cmllc1wiLFxyXG4gICAgXCJ0d2ZfZmllbGRzXCIgOiBcInR3Zl9maWVsZHNcIixcclxuICAgIFwicXVlc3Rpb25zXCI6IFwicXVlc3Rpb25zXCIsXHJcbiAgICBcImNvbW1hbmRzXCIgOiBcImNvbW1hbmRzXCIsXHJcbiAgICBcImhpbnRzXCIgOiBcImhpbnRzXCJcclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIG1pZ3JhdGVEYXRhKHNvdXJjbW9kZWxwYXRoOiBzdHJpbmcsIGRlc3Rtb2RlbHBhdGg6IHN0cmluZywgbW9kZWxuYW1lb2xkIDogc3RyaW5nKSB7XHJcblxyXG4gICAgdmFyIG1vZGVsbmFtZW5ldyA9IE1vZGVsTmFtZU1hcFttb2RlbG5hbWVvbGRdO1xyXG4gIHZhciBtZGwgPSBtMnMubG9hZE1vZGVsKHNvdXJjbW9kZWxwYXRoLCBtb2RlbG5hbWVvbGQpO1xyXG4gIHZhciBzY2hlbWEgPSBtMnMubWVyZ2VNb2RlbEpzb24obW9kZWxuYW1lbmV3LCBtZGwpO1xyXG4gIGZzLndyaXRlRmlsZVN5bmMoZGVzdG1vZGVscGF0aCArICAnLycrIG1vZGVsbmFtZW5ldyArICcubW9kZWwubW9uZ29vc2VzY2hlbWEuanNvbicgLCBKU09OLnN0cmluZ2lmeShzY2hlbWEsIHVuZGVmaW5lZCwgMikpO1xyXG4gIHZhciBuZXdtb2RlbGRvYyA9IG0ycy5tYWtlTW9kZWxEb2MobW9kZWxuYW1lbmV3LCBtZGwpO1xyXG4gIGZzLndyaXRlRmlsZVN5bmMoZGVzdG1vZGVscGF0aCArICAnLycrIG1vZGVsbmFtZW5ldyArICcubW9kZWwuZG9jLmpzb24nICwgSlNPTi5zdHJpbmdpZnkobmV3bW9kZWxkb2MsIHVuZGVmaW5lZCwgMikpO1xyXG4gIHZhciBtZGxkYXRhID0gbTJzLmxvYWRNb2RlbERhdGEoc291cmNtb2RlbHBhdGgsIG1vZGVsbmFtZW9sZCk7XHJcbiAgdmFyIG1kbERvY3MgPSBtMnMubWFrZURvY3VtZW50cyhtZGxkYXRhLG1kbCk7XHJcbi8vIHdyaXRlIHRoZSBkYXRhXHJcbiAgZnMud3JpdGVGaWxlU3luYyhkZXN0bW9kZWxwYXRoICsgJy8nICsgbW9kZWxuYW1lbmV3ICsgJy5kYXRhLmpzb24nLCBKU09OLnN0cmluZ2lmeShtZGxEb2NzLHVuZGVmaW5lZCwyKSk7XHJcbn1cclxuXHJcbk9iamVjdC5rZXlzKE1vZGVsTmFtZU1hcCkuZm9yRWFjaCgga2V5ID0+e1xyXG4gICAgbWlncmF0ZURhdGEoZm9sZGVyaW4sIGZvbGRlcm91dCwga2V5KTtcclxuICAgIGNvbnNvbGUubG9nKGAgbWlncmF0ZWQgJHtrZXl9IGApO1xyXG59KTsiXX0=
