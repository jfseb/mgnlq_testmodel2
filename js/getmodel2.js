"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTestModel = void 0;
const mongoose = require("mongoose");
const mongoose_record_replay = require("mongoose_record_replay");
const process = require("process");
const Constants = require("./constants2");
const mgnlq_model_1 = require("mgnlq_model");
var mode = 'REPLAY';
if (process.env[Constants.ENV_NAME_MONGO_RECORD_REPLAY] === "RECORD") {
    mode = 'RECORD';
}
else if (process.env[Constants.ENV_NAME_MONGO_RECORD_REPLAY] === "OFF") {
    mode = undefined;
}
else if (!process.env[Constants.ENV_NAME_MONGO_RECORD_REPLAY]
    || process.env[Constants.ENV_NAME_MONGO_RECORD_REPLAY] === "REPLAY") {
    mode = 'REPLAY';
}
else {
    throw new Error(`illegal value ${process.env[Constants.ENV_NAME_MONGO_RECORD_REPLAY]}  for ${Constants.ENV_NAME_MONGO_RECORD_REPLAY}, epxected one of "REPLAY", "RECORD", "OFF" or not set`);
}
var mypath = Constants.MONGOOSE_RECORD_REPLAY_FOLDER; // require().resolve('mgnlq_testmodel_replay');
var mongooseMock = mongoose_record_replay.instrumentMongoose(mongoose, mypath, // 'node_modules/mgnlq_testmodel_replay/mgrecrep/',
mode);
var aPromise = undefined;
var aPromise = undefined;
function loadModel() {
    return mgnlq_model_1.Model.loadModelsOpeningConnection(mongooseMock, Constants.MONGO_DBURL, Constants.MODEL_PATH);
}
/**
 * Obtain a model instance,
 *
 * note: the model must be closed via
 * Model.releaseModel(theModelInstance)
 */
function getTestModel() {
    if (mode === 'REPLAY') {
        // determine mode
        // in replax mode, using a singleton is sufficient
        aPromise = aPromise || loadModel();
        return aPromise;
    }
    return loadModel();
}
exports.getTestModel = getTestModel;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9nZXRtb2RlbDIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EscUNBQXFDO0FBQ3JDLGlFQUFpRTtBQUNqRSxtQ0FBbUM7QUFDbkMsMENBQTBDO0FBQzFDLDZDQUFpRTtBQUVqRSxJQUFJLElBQUksR0FBRyxRQUFRLENBQUM7QUFDcEIsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyw0QkFBNEIsQ0FBQyxLQUFLLFFBQVEsRUFBRTtJQUNwRSxJQUFJLEdBQUcsUUFBUSxDQUFDO0NBQ2pCO0tBQU0sSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyw0QkFBNEIsQ0FBQyxLQUFLLEtBQUssRUFBRTtJQUN4RSxJQUFJLEdBQUcsU0FBUyxDQUFDO0NBQ2xCO0tBQU0sSUFBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLDRCQUE0QixDQUFDO09BQzVELE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLDRCQUE0QixDQUFDLEtBQUssUUFBUSxFQUFFO0lBQ3BFLElBQUksR0FBRyxRQUFRLENBQUM7Q0FDakI7S0FBTztJQUNOLE1BQU0sSUFBSSxLQUFLLENBQUMsaUJBQWlCLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLDRCQUE0QixDQUFDLFNBQVUsU0FBUyxDQUFDLDRCQUE2Qix3REFBd0QsQ0FBQyxDQUFDO0NBQ2hNO0FBRUQsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDLDZCQUE2QixDQUFDLENBQUMsK0NBQStDO0FBRXJHLElBQUksWUFBWSxHQUFHLHNCQUFzQixDQUFDLGtCQUFrQixDQUFDLFFBQVEsRUFDbkUsTUFBTSxFQUFFLG1EQUFtRDtBQUMzRCxJQUFJLENBQUMsQ0FBQztBQUVSLElBQUksUUFBUSxHQUFHLFNBQVMsQ0FBQztBQUV6QixJQUFJLFFBQVEsR0FBRyxTQUFTLENBQUM7QUFFekIsU0FBUyxTQUFTO0lBQ2hCLE9BQU8sbUJBQUssQ0FBQywyQkFBMkIsQ0FBQyxZQUFZLEVBQUUsU0FBUyxDQUFDLFdBQVcsRUFBRSxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDdEcsQ0FBQztBQUVEOzs7OztHQUtHO0FBQ0gsU0FBZ0IsWUFBWTtJQUMxQixJQUFJLElBQUksS0FBSyxRQUFRLEVBQUU7UUFDckIsaUJBQWlCO1FBQ2pCLGtEQUFrRDtRQUNsRCxRQUFRLEdBQUcsUUFBUSxJQUFJLFNBQVMsRUFBRSxDQUFDO1FBQ25DLE9BQU8sUUFBUSxDQUFDO0tBQ2pCO0lBQ0QsT0FBTyxTQUFTLEVBQUUsQ0FBQztBQUNyQixDQUFDO0FBUkQsb0NBUUMiLCJmaWxlIjoiZ2V0bW9kZWwyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbmltcG9ydCAqIGFzIG1vbmdvb3NlIGZyb20gJ21vbmdvb3NlJztcclxuaW1wb3J0ICogYXMgbW9uZ29vc2VfcmVjb3JkX3JlcGxheSBmcm9tICdtb25nb29zZV9yZWNvcmRfcmVwbGF5JztcclxuaW1wb3J0ICogYXMgcHJvY2VzcyBmcm9tICdwcm9jZXNzJztcclxuaW1wb3J0ICogYXMgQ29uc3RhbnRzIGZyb20gJy4vY29uc3RhbnRzMic7XHJcbmltcG9ydCB7IE1vZGVsIGFzIE1vZGVsLCBJRk1vZGVsIGFzIElGTW9kZWwgfSBmcm9tICdtZ25scV9tb2RlbCc7XHJcblxyXG52YXIgbW9kZSA9ICdSRVBMQVknO1xyXG5pZiAocHJvY2Vzcy5lbnZbQ29uc3RhbnRzLkVOVl9OQU1FX01PTkdPX1JFQ09SRF9SRVBMQVldID09PSBcIlJFQ09SRFwiKSB7XHJcbiAgbW9kZSA9ICdSRUNPUkQnO1xyXG59IGVsc2UgaWYgKHByb2Nlc3MuZW52W0NvbnN0YW50cy5FTlZfTkFNRV9NT05HT19SRUNPUkRfUkVQTEFZXSA9PT0gXCJPRkZcIikge1xyXG4gIG1vZGUgPSB1bmRlZmluZWQ7XHJcbn0gZWxzZSBpZiAoICFwcm9jZXNzLmVudltDb25zdGFudHMuRU5WX05BTUVfTU9OR09fUkVDT1JEX1JFUExBWV1cclxuIHx8IHByb2Nlc3MuZW52W0NvbnN0YW50cy5FTlZfTkFNRV9NT05HT19SRUNPUkRfUkVQTEFZXSA9PT0gXCJSRVBMQVlcIikge1xyXG4gIG1vZGUgPSAnUkVQTEFZJztcclxufSBlbHNlICB7XHJcbiAgdGhyb3cgbmV3IEVycm9yKGBpbGxlZ2FsIHZhbHVlICR7cHJvY2Vzcy5lbnZbQ29uc3RhbnRzLkVOVl9OQU1FX01PTkdPX1JFQ09SRF9SRVBMQVldfSAgZm9yICR7IENvbnN0YW50cy5FTlZfTkFNRV9NT05HT19SRUNPUkRfUkVQTEFZIH0sIGVweGVjdGVkIG9uZSBvZiBcIlJFUExBWVwiLCBcIlJFQ09SRFwiLCBcIk9GRlwiIG9yIG5vdCBzZXRgKTtcclxufVxyXG5cclxudmFyIG15cGF0aCA9IENvbnN0YW50cy5NT05HT09TRV9SRUNPUkRfUkVQTEFZX0ZPTERFUjsgLy8gcmVxdWlyZSgpLnJlc29sdmUoJ21nbmxxX3Rlc3Rtb2RlbF9yZXBsYXknKTtcclxuXHJcbnZhciBtb25nb29zZU1vY2sgPSBtb25nb29zZV9yZWNvcmRfcmVwbGF5Lmluc3RydW1lbnRNb25nb29zZShtb25nb29zZSxcclxuICBteXBhdGgsIC8vICdub2RlX21vZHVsZXMvbWdubHFfdGVzdG1vZGVsX3JlcGxheS9tZ3JlY3JlcC8nLFxyXG4gIG1vZGUpO1xyXG5cclxudmFyIGFQcm9taXNlID0gdW5kZWZpbmVkO1xyXG5cclxudmFyIGFQcm9taXNlID0gdW5kZWZpbmVkO1xyXG5cclxuZnVuY3Rpb24gbG9hZE1vZGVsKCkge1xyXG4gIHJldHVybiBNb2RlbC5sb2FkTW9kZWxzT3BlbmluZ0Nvbm5lY3Rpb24obW9uZ29vc2VNb2NrLCBDb25zdGFudHMuTU9OR09fREJVUkwsIENvbnN0YW50cy5NT0RFTF9QQVRIKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIE9idGFpbiBhIG1vZGVsIGluc3RhbmNlLFxyXG4gKlxyXG4gKiBub3RlOiB0aGUgbW9kZWwgbXVzdCBiZSBjbG9zZWQgdmlhXHJcbiAqIE1vZGVsLnJlbGVhc2VNb2RlbCh0aGVNb2RlbEluc3RhbmNlKVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFRlc3RNb2RlbCgpOiBQcm9taXNlPHZvaWQgfCBJRk1vZGVsLklNb2RlbHM+IHtcclxuICBpZiAobW9kZSA9PT0gJ1JFUExBWScpIHtcclxuICAgIC8vIGRldGVybWluZSBtb2RlXHJcbiAgICAvLyBpbiByZXBsYXggbW9kZSwgdXNpbmcgYSBzaW5nbGV0b24gaXMgc3VmZmljaWVudFxyXG4gICAgYVByb21pc2UgPSBhUHJvbWlzZSB8fCBsb2FkTW9kZWwoKTtcclxuICAgIHJldHVybiBhUHJvbWlzZTtcclxuICB9XHJcbiAgcmV0dXJuIGxvYWRNb2RlbCgpO1xyXG59Il19
